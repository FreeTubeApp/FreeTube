# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build

on:
  push:
    branches: [ master, development ]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x]
        runtime: [ linux-x64, linux-arm64, win-x64, osx-x64 ]
        include:
        - runtime: linux-x64
          os: ubuntu-latest

        - runtime: linux-arm64
          os: ubuntu-latest

        - runtime: osx-x64
          os: macOS-latest

        - runtime: win-x64
          os: windows-latest

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run lint
    - name: Get Version Number
      uses: nyaayaya/package-version@v1
      with:
        path: 'package.json'
        follow-symlinks: false

    - name: Set Version Number Variable
      id: versionNumber
      uses: actions/github-script@v3
      env:
        IS_DEV: ${{ contains(github.ref, 'development') }}
        VERSION_NUMBER_NIGHTLY: ${{ env.PACKAGE_VERSION }}-nightly-${{ github.run_number }}
        VERSION_NUMBER: ${{ env.PACKAGE_VERSION }}
      with:
        result-encoding: string
        script: |
          if (${{ env.IS_DEV }}) {
            return "${{ env.VERSION_NUMBER_NIGHTLY }}"
          } else {
           return "${{env.VERSION_NUMBER }}"
          }
        # script: if ${{ env.IS_DEV }} then echo "::set-output name=VERSION_NUMBER::${{ env.VERSION_NUMBER_NIGHTLY }}" else echo "::set-output name=VERSION_NUMBER::${{ env.VERSION_NUMBER }}" fi

    - name: Update package.json version
      uses: jossef/action-set-json-field@v1
      with:
        file: package.json
        field: version
        value: ${{ steps.versionNumber.outputs.result }}


    - name: Install libarchive-tools
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      run: sudo apt -y install libarchive-tools; echo "Version Number ${{ toJson(job) }} ${{ toJson(needs) }}"

    - name: Build x64 with Node.js ${{ matrix.node-version}}
      if: contains(matrix.runtime, 'x64')
      run: npm run build --if-present

    - name: Build ARM64 with Node.js ${{ matrix.node-version}}
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-arm64')
      run: npm run build:arm64 --if-present

    - name: Upload Linux .zip x64 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_linux_portable_x64
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.zip

    - name: Upload Linux .zip ARM Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-arm64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_linux_portable_arm64
        path: build/freetube-${{ steps.versionNumber.outputs.result }}-arm64.zip

    - name: Upload .deb x64 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_amd64.deb
        path: build/freetube_${{ steps.versionNumber.outputs.result }}_amd64.deb

    - name: Upload .deb ARM Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-arm64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_arm64.deb
        path: build/freetube_${{ steps.versionNumber.outputs.result }}_arm64.deb

    - name: Upload AppImage x64 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_amd64.AppImage
        path: build/FreeTube-${{ steps.versionNumber.outputs.result }}.AppImage

    - name: Upload AppImage ARM Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-arm64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_arm64.AppImage
        path: build/FreeTube-${{ steps.versionNumber.outputs.result }}-arm64.AppImage

    - name: Upload .rpm x64 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_amd64.rpm
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.x86_64.rpm

    - name: Upload .rpm ARM Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-arm64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_arm64.rpm
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.aarch64.rpm

    - name: Upload Alpine .apk x64 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_alpine_amd64.apk
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.apk

    - name: Upload Alpine .apk ARM Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-arm64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_alpine_arm64.apk
        path: build/freetube-${{ steps.versionNumber.outputs.result }}-arm64.apk

    - name: Upload Pacman .pacman x64 Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      with:
        name: freetube_${{ steps.versionNumber.outputs.result }}_amd64.pacman
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.pacman

    # - name: Upload Web Build
      # uses: actions/upload-artifact@v2
      # if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.runtime, 'linux-x64')
      # with:
        # name: freetube_${{ steps.versionNumber.outputs.result }}_static_web
        # path: dist/web

    - name: Upload Windows .exe Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: freetube-${{ steps.versionNumber.outputs.result }}-win-x64-portable
        path: build/freetube-${{ steps.versionNumber.outputs.result }}-win.zip

    - name: Upload Windows .zip Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: freetube-${{ steps.versionNumber.outputs.result }}-setup-x64.exe
        path: build/freetube Setup ${{ steps.versionNumber.outputs.result }}.exe

    - name: Upload Windows Portable Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: freetube-${{ steps.versionNumber.outputs.result }}-portable-x64.exe
        path: build/freetube ${{ steps.versionNumber.outputs.result }}.exe

    - name: Upload Mac .dmg Artifact
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'macos')
      with:
        name: freetube-${{ steps.versionNumber.outputs.result }}-mac.dmg
        path: build/freetube-${{ steps.versionNumber.outputs.result }}.dmg
